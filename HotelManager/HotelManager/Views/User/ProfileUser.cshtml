@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interview Project</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <script type="text/javascript" charset="utf8" src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script type="text/javascript" charset="utf8"
            src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.js"></script>


</head>

<body>
    <!-- Navigation -->
    <div class="containers">
        <nav class="nav">
            <div class="nav-logo">
                <p>LOGO .</p>
            </div>
            <div class="nav-menu" id="navMenu">
                <ul>
                    <li><a href="/Test/listTestbyStudent" class="link active">Home</a></li>
                    <li><a href="#" class="link active">Profile</a></li>

                </ul>
            </div>


            <div class="nav-button">
                <a> <button class="btn white-btn" id="loginBtn" onclick="logout()">Logout</button></a>
            </div>
            <div class="nav-menu-btn">
                <i class="bx bx-menu" onclick="myMenuFunction()"></i>
            </div>
        </nav>
        <!-- Home -->
        <section id="home">
            <h2>Hotel Managment</h2>

        </section>
        <div class="container">
            <form id="myForm" class="row g-3">
                <div class="col-md-12">
                    <label for="inputEmail4" class="form-label">Email</label>
                    <input type="email" name="email" readonly class="form-control" id="email">
                </div>
                <div class="col-12">
                    <label for="inputAddress2" class="form-label">Name</label>
                    <input type="text" name="name" class="form-control" id="name">
                </div>
                <div style="display: none;" class="col-md-6">
                    <label for="inputPassword4" class="form-label">Password</label>
                    <input type="te" name="password" class="form-control" id="password">
                </div>
                <div class="col-md-12">
                    <label for="inputAddress" class="form-label">Address</label>
                    <input type="text" name="address" class="form-control" id="address">
                </div>

                <div class="col-md-12">
                    <label for="inputCity" class="form-label">Phone</label>
                    <input type="text" name="phone" class="form-control" id="phone">
                </div>


                <div style="margin-top: 20px;" class="col-3">
                    <button type="submit" onclick="submitForm(event)" class="btn btn-primary">Lưu thay đổi</button>


                </div>
            </form>
            <button style="margin: 0;background-color: red;color: white; float: right;margin-top: -40px;" class="btn open-form">Đổi mật khẩu</button>
            <div class="form-popup">
                <div class="container form-wrapper">
                    <button class="btn close-form">Close</button>
                    <form id="my-form" novalidate="novalidate">
                        <div class="row">
                            <div class="col-md-12 text-center">
                                <h1 class="form-title">Đổi mật khẩu</h1>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-12">
                                <label for="name">Mật khẩu hiện tại</label>
                                <input type="text" class="form-control" id="currentpass" name="name" required="">
                            </div>
                            <div class="form-group col-md-12">
                                <label for="email">Mật khẩu mới</label>
                                <input type="text" class="form-control" id="newpass" name="email" required="">
                            </div>
                            <div class="form-group col-md-12">
                                <label for="email">Nhâp lại mật khẩu</label>
                                <input type="text" class="form-control" id="repeatpass" name="email" required="">
                            </div>
                        </div>
                        <div class="row">


                            <button onclick="changPassword(event)" type="submit" class="btn send-form">Send</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <script>
        const jwt = sessionStorage.getItem("user");
        const token = sessionStorage.getItem("token");
        const gmail = sessionStorage.getItem("gmail");
        const role = sessionStorage.getItem("role");


        if (role == "Admin") {

            document.getElementById("navMenu1").style.display = "block"
            document.getElementById("navMenu").style.display = "none"

        }
        console.log(gmail)
        if (!token) {
            window.location.href = "/";
        }
        function submitForm(event) {
            event.preventDefault();

            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const address = document.getElementById('address').value;
            const phone = document.getElementById('phone').value;


            // Tạo đối tượng dữ liệu
            const data = {
                name: name,
                email: email,

                address: address,
                phone: phone,

                // Thêm các trường dữ liệu khác nếu cần
            };
            console.log(data)
            // Gọi API POST
            fetch('https://localhost:7081/api/Account/UpdateProfile', {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                    // Bạn có thể thêm các header khác nếu cần thiết
                },
                body: JSON.stringify(data),
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(errorData => {
                            alert(errorData)
                        });
                    }

                })
                .then(responseData => {
                    alert("Update account thành công")
                    window.location.reload();
                })
                .catch(error => {
                    console.log(error)
                    // Xử lý lỗi nếu cần
                });
        }
        function changPassword(event) {
            event.preventDefault();
            // Lấy dữ liệu từ form
            const currentpass = document.getElementById('currentpass').value;
            const newpass = document.getElementById('newpass').value;
            const repeatpass = document.getElementById('repeatpass').value;


            // Tạo đối tượng dữ liệu
            const data = {
                email: document.getElementById('email').value,
                oldPassword: currentpass,
                newPassword: newpass,
                resetPassword: repeatpass,
            };
            console.log(data)
            // Gọi API POST
            fetch('https://localhost:7156/api/Account/ChangePassword', {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                    // Bạn có thể thêm các header khác nếu cần thiết
                },
                body: JSON.stringify(data),
            })
                .then(response => {
                    if (!response.ok) {

                        return response.json().then(errorData => {
                            alert(errorData)
                        });
                    }
                    else {
                        alert("Reset password thành công")
                        window.location.reload();
                    }
                })
                .then(responseData => {


                })
                .catch(error => {
                    console.log(error)
                    // Xử lý lỗi nếu cần
                });

        }


        function getAndPopulateData() {
            // Tạo một yêu cầu GET đến API
            fetch(`https://localhost:7081/api/Account/${gmail}`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(errorData => {
                            alert(errorData)
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    const nameInput = document.getElementById('name');
                    const emailInput = document.getElementById('email');
                    const passwordInput = document.getElementById('password');
                    const addressInput = document.getElementById('address');
                    const phoneInput = document.getElementById('phone');
                    const roleRadioInputs = document.getElementsByName('gridRadios');

                    // Điền giá trị vào các trường input từ dữ liệu nhận được từ API
                    nameInput.value = data.username;
                    emailInput.value = data.email;
                    passwordInput.value = data.password;
                    addressInput.value = data.address;
                    phoneInput.value = data.phone;
                    for (const radioButton of roleRadioInputs) {
                        if (radioButton.value === data.radioButtons) {
                            radioButton.checked = true;
                            break;
                        }
                    }

                })
                .catch(error => {
                    console.error('Error fetching API:', error);
                });
        }

        // Gọi hàm khi trang được tải
        document.addEventListener('DOMContentLoaded', getAndPopulateData);

        $(document).ready(function () {

            $('.open-form').click(function () {
                $('.form-popup').show();
            });
            $('.close-form').click(function () {
                $('.form-popup').hide();
            });

            $('.reset-form').click(function () {
                $('.success-message').show();
                $('#my-form').trigger('reset');

                setTimeout(function () {
                    $('.success-message').hide()
                }, 1500);
            });

            $(document).mouseup(function (e) {
                var container = $(".form-wrapper");
                var form = $(".form-popup");

                if (!container.is(e.target) && container.has(e.target).length === 0) {
                    form.hide();
                }
            });


        });
        function logout() {
            sessionStorage.clear();
            window.location.reload();
        }
    </script>




</body>

</html>